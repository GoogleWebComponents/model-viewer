/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import {customElement, html, internalProperty, LitElement, property, query} from 'lit-element';

import {validationStyles} from '../../../styles.css.js';
import {State} from '../../../types.js';
import {ConnectedLitElement} from '../../connected_lit_element/connected_lit_element';
import {getGltfUrl} from '../../model_viewer_preview/reducer.js';
import {validateGltf} from './validation_utils.js';

@customElement('me-validation-modal')
export class ValidationModal extends LitElement {
  static styles = [validationStyles];

  @property() infoMessages: any[] = [];
  @property() hintMessages: any[] = [];
  @property() warningMessages: any[] = [];
  @property() errorMessages: any[] = [];
  @property() report: any = {};

  @internalProperty() isOpen: boolean = false;

  open() {
    this.isOpen = true;
  }

  close() {
    this.isOpen = false;
  }

  renderTable(color: string, title: string, messages: any[]) {
    return html`
<table class="report-table">
  <thead>
    <tr style="background: ${color};">
      <th>${title}</th>
      <th>Message</th>
      <th>Pointer</th>
    </tr>
  </thead>
  <tbody>
    ${messages.map(message => html`
    <tr>
      <td><code>${message.code}</code></td>
      <td>${message.message}</td>
      <td><code>${message.pointer}</code></td>
    </tr>
    `)}
  </tbody>
</table>
`;
  }

  renderMetaData() {
    return html`
<div class="report">
  <h1>Validation report</h1>
  <ul>
    <li><b>Format:</b> glTF ${this.report.info.version}</li>
    <li><b>Generator:</b> ${this.report.info.generator}</li>
    ${
        this.report.info.extras ? html`
      ${
                                      this.report.infor.extras.title ? html`
        <li><b>Title:</b> ${this.report.info.extras.title}</li>` :
                                                                       html``}
      ${
                                      this.report.infor.extras.author ? html`
       <li><b>Author:</b> ${this.report.info.extras.author}</li>` :
                                                                        html``}
      ${
                                      this.report.infor.extras.license ? html`
        <li><b>License:</b> ${this.report.info.extras.license}</li>` :
                                                                         html``}
      ${
                                      this.report.infor.extras.source ? html`
        <li><b>Source:</b> ${this.report.info.extras.source}</li>` :
                                                                        html``}
    ` :
                                  html``}
    <li>
      <b>Stats:</b>
      <ul>
        <li>${this.report.info.drawCallCount} draw calls</li>
        <li>${this.report.info.animationCount} animations</li>
        <li>${this.report.info.materialCount} materials</li>
        <li>${this.report.info.totalVertexCount} vertices</li>
        <li>${this.report.info.totalTriangleCount} triangles</li>
      </ul>
    </li>
  </ul>
  <hr/>
  <p>
    Report generated by
    <a href="https://github.com/KhronosGroup/glTF-Validator/">KhronosGroup/glTF-Validator</a>
    {{validatorVersion}}.
  </p>
</div>
    `;
  }

  render() {
    return html`
<paper-dialog id="file-modal" modal ?opened=${this.isOpen}>
  <div class="container">
    <div class="cancel">
      <mwc-button unelevated icon="cancel" @click=${this.close}>
        Close
      </mwc-button>
    </div>
    ${this.renderMetaData()}
    ${
        this.report.issues.numErrors ?
            this.renderTable('#f44336', 'Error', this.errorMessages) :
            html``}
   ${
        this.report.issues.numWarnings ?
            this.renderTable('#f9a825', 'Warning', this.warningMessages) :
            html``}
   ${
        this.report.issues.numHints ?
            this.renderTable('#8bc34a', 'Hint', this.hintMessages) :
            html``}
    ${
        this.report.issues.numInfos ?
            this.renderTable('#2196f3', 'Info', this.infoMessages) :
            html``}
  </div>
</paper-dialog>`;
  }
}

/**
 * Model validator
 */
@customElement('me-validation')
export class Validation extends ConnectedLitElement {
  @query('me-validation-modal#validation-modal')
  validationModal!: ValidationModal;
  @internalProperty() gltfUrl?: string;
  @internalProperty() report: any = {};

  @internalProperty() severityTitle: string = '';
  @internalProperty() severityColor: string = '';

  @internalProperty() infoMessages: any = [];
  @internalProperty() hintMessages: any = [];
  @internalProperty() warningMessages: any = [];
  @internalProperty() errorMessages: any = [];

  stateChanged(state: State) {
    const newGltfUrl = getGltfUrl(state);
    if (newGltfUrl !== this.gltfUrl && typeof newGltfUrl === 'string') {
      this.gltfUrl = newGltfUrl;
      this.awaitLoad(this.gltfUrl);
    }
  }

  async awaitLoad(url: string) {
    this.report = await validateGltf(url);
    this.infoMessages = [];
    this.hintMessages = [];
    this.warningMessages = [];
    this.errorMessages = [];
    this.severityTitle = 'Model Details';
    this.severityColor = '#202020';
    if (this.report.issues.numInfos) {
      this.infoMessages = this.report.infos;
      this.severityColor = '#2196f3';
      this.severityTitle = 'Info';
    }
    if (this.report.issues.numHints) {
      this.hintMessages = this.report.hints;
      this.severityColor = '#8bc34a';
      this.severityTitle = 'Hint';
    }
    if (this.report.issues.numWarnings) {
      this.warningMessages = this.report.warnings;
      this.severityColor = '#f9a825';
      this.severityTitle = 'Warning';
    }
    if (this.report.issues.numErrors) {
      this.errorMessages = this.report.errors;
      this.severityColor = '#f44336';
      this.severityTitle = 'Error';
    }
  }

  onOpen() {
    this.validationModal.open();
  }

  render() {
    return html`
    ${
        this.severityTitle.length > 0 ? html`
<mwc-button unelevated style="align-self: center;"
  @click=${this.onOpen} style="--mdc-theme-primary: ${this.severityColor}">
  ${this.severityTitle}
</mwc-button>` :
                                        html``}
    <me-validation-modal id="validation-modal"
      .infoMessages=${this.infoMessages}
      .hintMessages=${this.hintMessages}
      .warningMessages=${this.warningMessages}
      .errorMessages=${this.errorMessages}
      .report=${this.report}
    ></me-validation-modal>
    `;
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'me-validation-modal': ValidationModal;
    'me-validation': Validation;
  }
}
